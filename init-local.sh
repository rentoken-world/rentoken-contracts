#!/bin/bash

# Ê≠§ËÑöÊú¨Â∞ÜÂêàÁ∫¶ÈÉ®ÁΩ≤Âà∞Êú¨Âú∞ Anvil ÂÆû‰æãÂπ∂Â∞ÜÂÆÉ‰ª¨ÁöÑÂú∞ÂùÄÂØºÂá∫‰∏∫ÁéØÂ¢ÉÂèòÈáè„ÄÇ
# ÂÅáËÆæ Anvil Âú® localhost:8545 ‰∏äËøêË°å„ÄÇ‰ΩøÁî® source init-local.sh ËøêË°å‰ª•ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè„ÄÇ

set -e  # Âá∫ÈîôÊó∂ÈÄÄÂá∫
export FOUNDRY_DISABLE_NIGHTLY_WARNING=1

# ÁîüÊàê5‰∏™ÊµãËØïË¥¶Êà∑
echo "Generating 5 test accounts from Anvil default mnemonic..."
MNEMONIC="test test test test test test test test test test test junk"

for i in {0..4}; do
    PRIVATE_KEY=$(cast wallet derive-private-key --mnemonic "$MNEMONIC" --mnemonic-index $i 2>/dev/null)
    ADDRESS=$(cast wallet address --private-key $PRIVATE_KEY 2>/dev/null)
    export ACCOUNT_${i}_ADDRESS=$ADDRESS
    export ACCOUNT_${i}_PRIVATE_KEY=$PRIVATE_KEY
done

# ËÆæÁΩÆÂ∏∏Áî®Âà´Âêç
export ADMIN_ADDRESS=$ACCOUNT_0_ADDRESS
export ADMIN_PRIVATE_KEY=$ACCOUNT_0_PRIVATE_KEY
export USER1_ADDRESS=$ACCOUNT_1_ADDRESS
export USER1_PRIVATE_KEY=$ACCOUNT_1_PRIVATE_KEY
export USER2_ADDRESS=$ACCOUNT_2_ADDRESS
export USER2_PRIVATE_KEY=$ACCOUNT_2_PRIVATE_KEY
export USER3_ADDRESS=$ACCOUNT_3_ADDRESS
export USER3_PRIVATE_KEY=$ACCOUNT_3_PRIVATE_KEY
export USER4_ADDRESS=$ACCOUNT_4_ADDRESS
export USER4_PRIVATE_KEY=$ACCOUNT_4_PRIVATE_KEY

echo "Test accounts generated:"
echo "ADMIN: $ADMIN_ADDRESS"
echo "USER1: $USER1_ADDRESS"
echo "USER2: $USER2_ADDRESS"
echo "USER3: $USER3_ADDRESS"
echo "USER4: $USER4_ADDRESS"

RPC_URL="http://localhost:8545"
# Anvil ÈªòËÆ§ÁßÅÈí•ÔºåÁî®‰∫éË¥¶Êà∑ 0ÔºàÂ∏¶Êúâ ETH ‰ΩôÈ¢ùÔºâ
PRIVATE_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

echo "Deploying contracts to local Anvil..."

# Ê≥®ÊÑè: Ê≠§ËÑöÊú¨ÂÅáËÆæ Anvil ‰ª•‰∏ªÁΩë fork Ê®°ÂºèËøêË°å (anvil --fork-url <mainnet_rpc>)Ôºå‰ª•‰ΩøÁî®ÁúüÂÆûÁöÑ USDC Âíå Sanction Oracle ÂêàÁ∫¶„ÄÇ

# ÈÉ®ÁΩ≤ KYCOracle
KYC_ORACLE_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --private-key $ADMIN_PRIVATE_KEY src/KYCOracle.sol:KYCOracle | grep "Deployed to:" | awk '{print $3}')
echo "Deployed KYCOracle at $KYC_ORACLE_ADDR"
[ -n "$KYC_ORACLE_ADDR" ] || { echo "Error: Failed to deploy KYCOracle"; exit 1; }

# ÈÉ®ÁΩ≤ PropertyOracle
PROPERTY_ORACLE_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --private-key $ADMIN_PRIVATE_KEY src/PropertyOracle.sol:PropertyOracle | grep "Deployed to:" | awk '{print $3}')
echo "Deployed PropertyOracle at $PROPERTY_ORACLE_ADDR"
[ -n "$PROPERTY_ORACLE_ADDR" ] || { echo "Error: Failed to deploy PropertyOracle"; exit 1; }

# ÈÉ®ÁΩ≤ RentToken ÂÆûÁé∞
RENT_TOKEN_IMPL_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --private-key $ADMIN_PRIVATE_KEY src/RentToken.sol:RentToken | grep "Deployed to:" | awk '{print $3}')
echo "Deployed RentToken implementation at $RENT_TOKEN_IMPL_ADDR"
[ -n "$RENT_TOKEN_IMPL_ADDR" ] || { echo "Error: Failed to deploy RentToken implementation"; exit 1; }

# ‰ΩøÁî®ÁúüÂÆûÁöÑ‰∏ªÁΩëÂú∞ÂùÄ
USDC_ADDR=0xA0b86991c6218b36c1d19d4a2e9eb0ce3606eb48
echo "Using real USDC at $USDC_ADDR"
SANCTION_ORACLE_ADDR=0x40C57923924B5c5c5455c48D93317139ADDaC8fb
echo "Using real Sanction Oracle at $SANCTION_ORACLE_ADDR"

# ‰ΩøÁî® PropertyOracle ÈÉ®ÁΩ≤ SeriesFactory
SERIES_FACTORY_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --private-key $ADMIN_PRIVATE_KEY src/SeriesFactory.sol:SeriesFactory --constructor-args $PROPERTY_ORACLE_ADDR | grep "Deployed to:" | awk '{print $3}')
echo "Deployed SeriesFactory at $SERIES_FACTORY_ADDR"
[ -n "$SERIES_FACTORY_ADDR" ] || { echo "Error: Failed to deploy SeriesFactory"; exit 1; }

# Âú® SeriesFactory ‰∏≠ËÆæÁΩÆ RentToken ÂÆûÁé∞ÔºàÈÉ®ÁΩ≤ËÄÖÂÖ∑ÊúâÁÆ°ÁêÜÂëòËßíËâ≤Ôºâ
cast send --rpc-url $RPC_URL --private-key $ADMIN_PRIVATE_KEY $SERIES_FACTORY_ADDR "updateRentTokenImplementation(address)" $RENT_TOKEN_IMPL_ADDR
echo "Set RentToken implementation in SeriesFactory"

# ÂØºÂá∫ÁéØÂ¢ÉÂèòÈáè
export KYC_ORACLE_ADDR
export PROPERTY_ORACLE_ADDR
export RENT_TOKEN_IMPL_ADDR
export SERIES_FACTORY_ADDR
export USDC_ADDR
export SANCTION_ORACLE_ADDR

echo "Deployment complete. Environment variables exported:"
echo "KYC_ORACLE_ADDR=$KYC_ORACLE_ADDR"
echo "PROPERTY_ORACLE_ADDR=$PROPERTY_ORACLE_ADDR"
echo "RENT_TOKEN_IMPL_ADDR=$RENT_TOKEN_IMPL_ADDR"
echo "SERIES_FACTORY_ADDR=$SERIES_FACTORY_ADDR"
echo "USDC_ADDR=$USDC_ADDR"
echo "SANCTION_ORACLE_ADDR=$SANCTION_ORACLE_ADDR"

# È™åËØÅÂêàÁ∫¶ÈÉ®ÁΩ≤
echo "Verifying deployments..."

# È™åËØÅ KYCOracle (Ë∞ÉÁî® owner())
KYC_OWNER=$(cast call --rpc-url $RPC_URL $KYC_ORACLE_ADDR "owner()(address)")
echo "KYCOracle owner: $KYC_OWNER"

# È™åËØÅ PropertyOracle (Ë∞ÉÁî® owner())
PROPERTY_OWNER=$(cast call --rpc-url $RPC_URL $PROPERTY_ORACLE_ADDR "owner()(address)")
echo "PropertyOracle owner: $PROPERTY_OWNER"

# È™åËØÅ RentToken implementation (Ë∞ÉÁî® decimals()ÔºåÂÅáËÆæÂÆÉÊòØÂèØË∞ÉÁî®ÁöÑ)
RENT_DECIMALS=$(cast call --rpc-url $RPC_URL $RENT_TOKEN_IMPL_ADDR "decimals()(uint8)")
echo "RentToken decimals: $RENT_DECIMALS"

# È™åËØÅ SeriesFactory (Ë∞ÉÁî® propertyOracle())
FACTORY_ORACLE=$(cast call --rpc-url $RPC_URL $SERIES_FACTORY_ADDR "propertyOracle()(address)")
echo "SeriesFactory propertyOracle: $FACTORY_ORACLE"

# È™åËØÅ USDC (Ë∞ÉÁî® symbol())
USDC_SYMBOL=$(cast call --rpc-url $RPC_URL $USDC_ADDR "symbol()(string)")
echo "USDC symbol: $USDC_SYMBOL"

# È™åËØÅ SanctionOracle (Ë∞ÉÁî® isSanctioned(0x000...000))
SANCTION_CHECK=$(cast call --rpc-url $RPC_URL $SANCTION_ORACLE_ADDR "isSanctioned(address)(bool)" 0x0000000000000000000000000000000000000000)
echo "SanctionOracle isSanctioned(0x0): $SANCTION_CHECK"

# Áî®usdcÂ∑®È≤∏Ë¥¶Êà∑ÁªôuserÂÖÖÂÄºÔºåÊØè‰∫∫1e4 usdc
echo "üí∞ Funding test accounts with USDC from whale..."

# ‰ΩøÁî®Â∑≤Áü•ÁöÑ USDC Â∑®È≤∏Ë¥¶Êà∑
USDC_WHALE=0x55fe002aeff02f77364de339a1292923a15844b8

# Ê®°ÊãüÂ∑®È≤∏Ë¥¶Êà∑
cast rpc --rpc-url $RPC_URL anvil_impersonateAccount $USDC_WHALE

# ÁªôÊØè‰∏™ÊµãËØïË¥¶Êà∑ÂÖÖÂÄº 10000 USDC (1e4 * 1e6 = 1e10)
echo "üí∏ Transferring 10000 USDC to each test account..."

# Áªô ADMIN ÂÖÖÂÄº
cast send --rpc-url $RPC_URL --from $USDC_WHALE --unlocked $USDC_ADDR "transfer(address,uint256)" $ADMIN_ADDRESS 10000000000 || { echo "‚ùå Failed to fund ADMIN"; exit 1; }
echo "‚úÖ ADMIN funded with 10000 USDC"

# Áªô USER1 ÂÖÖÂÄº
cast send --rpc-url $RPC_URL --from $USDC_WHALE --unlocked $USDC_ADDR "transfer(address,uint256)" $USER1_ADDRESS 10000000000 || { echo "‚ùå Failed to fund USER1"; exit 1; }
echo "‚úÖ USER1 funded with 10000 USDC"

# Áªô USER2 ÂÖÖÂÄº
cast send --rpc-url $RPC_URL --from $USDC_WHALE --unlocked $USDC_ADDR "transfer(address,uint256)" $USER2_ADDRESS 10000000000 || { echo "‚ùå Failed to fund USER2"; exit 1; }
echo "‚úÖ USER2 funded with 10000 USDC"

# Áªô USER3 ÂÖÖÂÄº
cast send --rpc-url $RPC_URL --from $USDC_WHALE --unlocked $USDC_ADDR "transfer(address,uint256)" $USER3_ADDRESS 10000000000 || { echo "‚ùå Failed to fund USER3"; exit 1; }
echo "‚úÖ USER3 funded with 10000 USDC"

# Áªô USER4 ÂÖÖÂÄº
cast send --rpc-url $RPC_URL --from $USDC_WHALE --unlocked $USDC_ADDR "transfer(address,uint256)" $USER4_ADDRESS 10000000000 || { echo "‚ùå Failed to fund USER4"; exit 1; }
echo "‚úÖ USER4 funded with 10000 USDC"

# ÂÅúÊ≠¢Ê®°ÊãüÂ∑®È≤∏Ë¥¶Êà∑
cast rpc --rpc-url $RPC_URL anvil_stopImpersonatingAccount $USDC_WHALE

# È™åËØÅÂÖÖÂÄºÁªìÊûú
echo "üîç Verifying USDC balances..."

ADMIN_USDC_BALANCE=$(cast call --rpc-url $RPC_URL $USDC_ADDR "balanceOf(address)(uint256)" $ADMIN_ADDRESS)
USER1_USDC_BALANCE=$(cast call --rpc-url $RPC_URL $USDC_ADDR "balanceOf(address)(uint256)" $USER1_ADDRESS)
USER2_USDC_BALANCE=$(cast call --rpc-url $RPC_URL $USDC_ADDR "balanceOf(address)(uint256)" $USER2_ADDRESS)
USER3_USDC_BALANCE=$(cast call --rpc-url $RPC_URL $USDC_ADDR "balanceOf(address)(uint256)" $USER3_ADDRESS)
USER4_USDC_BALANCE=$(cast call --rpc-url $RPC_URL $USDC_ADDR "balanceOf(address)(uint256)" $USER4_ADDRESS)

echo "USDC Balances:"
echo "  ADMIN:  $ADMIN_USDC_BALANCE (should be >= 10000000000)"
echo "  USER1:  $USER1_USDC_BALANCE (should be >= 10000000000)"
echo "  USER2:  $USER2_USDC_BALANCE (should be >= 10000000000)"
echo "  USER3:  $USER3_USDC_BALANCE (should be >= 10000000000)"
echo "  USER4:  $USER4_USDC_BALANCE (should be >= 10000000000)"
