#!/bin/bash

# 此脚本将合约部署到sepolia 上 并将它们的地址写入 .env 文件。
# 使用 https://eth-sepolia.public.blastapi.io
# 使用 admin 的 账户是 本地keystore文件，在cast命令里使用 --account myMetaMaskAcc --password ''
# Mock usdc sepolia地址： 0xDc11EcA4E796D530145CF582531F4fA289F95757
# 不需要设置USERS，只要部署合约即可
# 需要设置 ETHERSCAN_API_KEY 环境变量用于合约验证

set -e  # 出错时退出

export FOUNDRY_DISABLE_NIGHTLY_WARNING=true

# 创建 .env 文件
ENV_FILE=".env"
echo "# Generated by init-sepolia.sh - $(date)" > $ENV_FILE
echo "# Sepolia deployment configuration" >> $ENV_FILE
echo "" >> $ENV_FILE

# Sepolia 配置
RPC_URL="https://eth-sepolia.public.blastapi.io"
CHAIN_ID="11155111"
echo "# RPC Configuration" >> $ENV_FILE
echo "RPC_URL=$RPC_URL" >> $ENV_FILE
echo "CHAIN_ID=$CHAIN_ID" >> $ENV_FILE
echo "" >> $ENV_FILE
echo "# Etherscan Configuration" >> $ENV_FILE
echo "ETHERSCAN_API_KEY=$ETHERSCAN_API_KEY" >> $ENV_FILE

echo "Deploying contracts to Sepolia..."

# 使用 Sepolia 上的 Mock USDC 地址
USDC_ADDR="0xDc11EcA4E796D530145CF582531F4fA289F95757"
echo "Using Mock USDC on Sepolia at $USDC_ADDR"

# 检查 Etherscan API key
if [ -z "$ETHERSCAN_API_KEY" ]; then
    echo "❌ Error: ETHERSCAN_API_KEY environment variable is not set"
    echo "Please set ETHERSCAN_API_KEY before running this script"
    exit 1
fi

# 部署 KYCOracle
echo "Deploying KYCOracle..."
KYC_ORACLE_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --account myMetaMaskAcc --password '' --verifier etherscan --etherscan-api-key $ETHERSCAN_API_KEY src/KYCOracle.sol:KYCOracle | grep "Deployed to:" | awk '{print $3}')
echo "Deployed KYCOracle at $KYC_ORACLE_ADDR"
[ -n "$KYC_ORACLE_ADDR" ] || { echo "Error: Failed to deploy KYCOracle"; exit 1; }

# 部署 PropertyOracle
echo "Deploying PropertyOracle..."
PROPERTY_ORACLE_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --account myMetaMaskAcc --password '' --verifier etherscan --etherscan-api-key $ETHERSCAN_API_KEY src/PropertyOracle.sol:PropertyOracle | grep "Deployed to:" | awk '{print $3}')
echo "Deployed PropertyOracle at $PROPERTY_ORACLE_ADDR"
[ -n "$PROPERTY_ORACLE_ADDR" ] || { echo "Error: Failed to deploy PropertyOracle"; exit 1; }

# 部署 RentToken 实现
echo "Deploying RentToken implementation..."
RENT_TOKEN_IMPL_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --account myMetaMaskAcc --password '' --verifier etherscan --etherscan-api-key $ETHERSCAN_API_KEY src/RentToken.sol:RentToken | grep "Deployed to:" | awk '{print $3}')
echo "Deployed RentToken implementation at $RENT_TOKEN_IMPL_ADDR"
[ -n "$RENT_TOKEN_IMPL_ADDR" ] || { echo "Error: Failed to deploy RentToken implementation"; exit 1; }

# 部署 MockSanctionOracle
echo "Deploying MockSanctionOracle..."
SANCTION_ORACLE_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --account myMetaMaskAcc --password '' --verifier etherscan --etherscan-api-key $ETHERSCAN_API_KEY src/mocks/MockSanctionOracle.sol:MockSanctionOracle | grep "Deployed to:" | awk '{print $3}')
echo "Deployed MockSanctionOracle at $SANCTION_ORACLE_ADDR"
[ -n "$SANCTION_ORACLE_ADDR" ] || { echo "Error: Failed to deploy MockSanctionOracle"; exit 1; }

# 使用 PropertyOracle 部署 SeriesFactory
echo "Deploying SeriesFactory..."
SERIES_FACTORY_ADDR=$(forge create --broadcast --rpc-url $RPC_URL --account myMetaMaskAcc --password '' --verifier etherscan --etherscan-api-key $ETHERSCAN_API_KEY src/SeriesFactory.sol:SeriesFactory --constructor-args $PROPERTY_ORACLE_ADDR | grep "Deployed to:" | awk '{print $3}')
echo "Deployed SeriesFactory at $SERIES_FACTORY_ADDR"
[ -n "$SERIES_FACTORY_ADDR" ] || { echo "Error: Failed to deploy SeriesFactory"; exit 1; }

# 在 SeriesFactory 中设置 RentToken 实现（部署者具有管理员角色）
echo "Setting RentToken implementation in SeriesFactory..."
cast send --rpc-url $RPC_URL --account myMetaMaskAcc --password '' $SERIES_FACTORY_ADDR "updateRentTokenImplementation(address)" $RENT_TOKEN_IMPL_ADDR
echo "Set RentToken implementation in SeriesFactory"

# 写入合约地址到 .env 文件
echo "" >> $ENV_FILE
echo "# Contract Addresses" >> $ENV_FILE
echo "KYC_ORACLE_ADDR=$KYC_ORACLE_ADDR" >> $ENV_FILE
echo "PROPERTY_ORACLE_ADDR=$PROPERTY_ORACLE_ADDR" >> $ENV_FILE
echo "RENT_TOKEN_IMPL_ADDR=$RENT_TOKEN_IMPL_ADDR" >> $ENV_FILE
echo "SANCTION_ORACLE_ADDR=$SANCTION_ORACLE_ADDR" >> $ENV_FILE
echo "SERIES_FACTORY_ADDR=$SERIES_FACTORY_ADDR" >> $ENV_FILE
echo "USDC_ADDR=$USDC_ADDR" >> $ENV_FILE

echo "Deployment complete. Contract addresses written to $ENV_FILE:"
echo "KYC_ORACLE_ADDR=$KYC_ORACLE_ADDR"
echo "PROPERTY_ORACLE_ADDR=$PROPERTY_ORACLE_ADDR"
echo "RENT_TOKEN_IMPL_ADDR=$RENT_TOKEN_IMPL_ADDR"
echo "SANCTION_ORACLE_ADDR=$SANCTION_ORACLE_ADDR"
echo "SERIES_FACTORY_ADDR=$SERIES_FACTORY_ADDR"
echo "USDC_ADDR=$USDC_ADDR"
echo "SANCTION_ORACLE_ADDR=$SANCTION_ORACLE_ADDR"

# 验证合约部署
echo "Verifying deployments..."

# 验证 KYCOracle (调用 owner())
KYC_OWNER=$(cast call --rpc-url $RPC_URL $KYC_ORACLE_ADDR "owner()(address)")
echo "KYCOracle owner: $KYC_OWNER"

# 验证 PropertyOracle (调用 owner())
PROPERTY_OWNER=$(cast call --rpc-url $RPC_URL $PROPERTY_ORACLE_ADDR "owner()(address)")
echo "PropertyOracle owner: $PROPERTY_OWNER"

# 验证 RentToken implementation (调用 decimals()，假设它是可调用的)
RENT_DECIMALS=$(cast call --rpc-url $RPC_URL $RENT_TOKEN_IMPL_ADDR "decimals()(uint8)")
echo "RentToken decimals: $RENT_DECIMALS"

# 验证 SeriesFactory (调用 propertyOracle())
FACTORY_ORACLE=$(cast call --rpc-url $RPC_URL $SERIES_FACTORY_ADDR "propertyOracle()(address)")
echo "SeriesFactory propertyOracle: $FACTORY_ORACLE"

# 验证 USDC (调用 symbol())
USDC_SYMBOL=$(cast call --rpc-url $RPC_URL $USDC_ADDR "symbol()(string)")
echo "USDC symbol: $USDC_SYMBOL"

# 验证 MockSanctionOracle (调用 isSanctioned(0x000...000))
SANCTION_CHECK=$(cast call --rpc-url $RPC_URL $SANCTION_ORACLE_ADDR "isSanctioned(address)(bool)" 0x0000000000000000000000000000000000000000)
echo "MockSanctionOracle isSanctioned(0x0): $SANCTION_CHECK"

echo ""
echo "✅ All environment variables have been written to $ENV_FILE"
echo "📝 To use these variables in your shell, run: source $ENV_FILE"
echo "🔧 Or use them in forge scripts with: vm.envString('VARIABLE_NAME')"
echo ""
echo "📋 Generated .env file structure:"
echo "   - RPC configuration for Sepolia"
echo "   - Etherscan API key configuration"
echo "   - Contract addresses"
echo "   - Mock USDC address on Sepolia"
echo ""
echo "⚠️  Note: .env file is gitignored for security. Keep your private keys safe!"
echo "💡 You can copy .env.example to .env and run this script to populate it."
